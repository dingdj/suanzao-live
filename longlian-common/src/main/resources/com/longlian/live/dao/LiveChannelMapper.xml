<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.longlian.live.dao.LiveChannelMapper">

  <resultMap id="BaseResultMap" type="com.longlian.model.LiveChannel">
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="CODE" jdbcType="VARCHAR" property="code" />
    <result column="PUSH_ADDR" jdbcType="VARCHAR" property="pushAddr" />
    <result column="PLAY_ADDR1" jdbcType="VARCHAR" property="playAddr1" />
    <result column="PLAY_ADDR2" jdbcType="VARCHAR" property="playAddr2" />
    <result column="PLAY_ADDR3" jdbcType="VARCHAR" property="playAddr3" />
    <result column="DOMAIN" jdbcType="VARCHAR" property="domain" />
  </resultMap>

  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    ID, CODE, PUSH_ADDR, PLAY_ADDR1, PLAY_ADDR2, PLAY_ADDR3 , `DOMAIN`
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from live_channel
    where ID = #{id}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from live_channel
    where ID = #{id}
  </delete>

  <insert id="insert" parameterType="com.longlian.model.LiveChannel">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into live_channel (CODE, PUSH_ADDR, PLAY_ADDR1, PLAY_ADDR2, PLAY_ADDR3 , `DOMAIN`)
    values (#{code}, #{pushAddr}, #{playAddr1}, #{playAddr2}, #{playAddr3}, #{domain})
  </insert>

  <insert id="insertSelective" parameterType="com.longlian.model.LiveChannel">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into live_channel
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="@Ognl@isNotEmpty(code)">
        CODE,
      </if>
      <if test="@Ognl@isNotEmpty(pushAddr)">
        PUSH_ADDR,
      </if>
      <if test="@Ognl@isNotEmpty(playAddr1)">
        PLAY_ADDR1,
      </if>
      <if test="@Ognl@isNotEmpty(playAddr2)">
        PLAY_ADDR2,
      </if>
      <if test="@Ognl@isNotEmpty(playAddr3)">
        PLAY_ADDR3,
      </if>
      <if test="@Ognl@isNotEmpty(domain)">
        `DOMAIN`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="@Ognl@isNotEmpty(code)">
        #{code},
      </if>
      <if test="@Ognl@isNotEmpty(pushAddr)">
        #{pushAddr},
      </if>
      <if test="@Ognl@isNotEmpty(playAddr1)">
        #{playAddr1},
      </if>
      <if test="@Ognl@isNotEmpty(playAddr2)">
        #{playAddr2},
      </if>
      <if test="@Ognl@isNotEmpty(playAddr3)">
        #{playAddr3},
      </if>
      <if test="@Ognl@isNotEmpty(domain)">
        #{domain},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.longlian.model.LiveChannel">
    update live_channel
    <set>
      <if test="@Ognl@isNotEmpty(code)">
        CODE = #{code},
      </if>
      <if test="@Ognl@isNotEmpty(pushAddr)">
        PUSH_ADDR = #{pushAddr},
      </if>
      <if test="@Ognl@isNotEmpty(playAddr1)">
        PLAY_ADDR1 = #{playAddr1},
      </if>
      <if test="@Ognl@isNotEmpty(playAddr2)">
        PLAY_ADDR2 = #{playAddr2},
      </if>
      <if test="@Ognl@isNotEmpty(playAddr3)">
        PLAY_ADDR3 = #{playAddr3},
      </if>
      <if test="@Ognl@isNotEmpty(domain)">
        `DOMAIN` = #{domain},
      </if>
    </set>
    where ID = #{id}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.longlian.model.LiveChannel">
    update live_channel
    set CODE = #{code},
      PUSH_ADDR = #{pushAddr},
      PLAY_ADDR1 = #{playAddr1},
      PLAY_ADDR2 = #{playAddr2},
      PLAY_ADDR3 = #{playAddr3},
    `DOMAIN`= #{domain}
    where ID = #{id}
  </update>

  <select id="getAll"   resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from live_channel order by CODE

  </select>

  <select id="getListPage" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM live_channel
    <where>
      1=1
      <if test="@Ognl@isNotEmpty(liveChannel.code)">
        AND CODE = #{liveChannel.code}
      </if>
    </where>
  </select>

  <select id="getByCode" resultType="long">
    SELECT count(1) FROM live_channel WHERE  CODE = #{code} AND ID != #{id}
  </select>

</mapper>