<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.longlian.live.dao.ChatRoomMsgMapper">
    <resultMap id="BaseResultMap" type="com.longlian.model.ChatRoomMsg">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="ID" jdbcType="BIGINT" property="id"/>
        <result column="FROM_ACCOUNT" jdbcType="BIGINT" property="fromAccount"/>
        <result column="FROM_CLIENT_TYPE" jdbcType="VARCHAR" property="fromClientType"/>
        <result column="MSGID_CLIENT" jdbcType="VARCHAR" property="msgidClient"/>
        <result column="FROM_EXT" jdbcType="VARCHAR" property="fromExt"/>
        <result column="FROM_AVATOR" jdbcType="VARCHAR" property="fromAvator"/>
        <result column="FROM_NICK" jdbcType="VARCHAR" property="fromNick"/>
        <result column="MSG_TIMESTAMP" jdbcType="TIMESTAMP" property="msgTimestamp"/>
        <result column="RESEND_FLAG" jdbcType="VARCHAR" property="resendFlag"/>
        <result column="MSG_TYPE" jdbcType="VARCHAR" property="msgType"/>
        <result column="CHAT_ROOM_ID" jdbcType="BIGINT" property="chatRoomId"/>
        <result column="QUIZ_OR_REPLY" jdbcType="VARCHAR" property="quizOrReply"/>
        <result column="REPLY_ID" jdbcType="BIGINT" property="replyId"/>
        <result column="REPLY_NAME" jdbcType="VARCHAR" property="replyName"/>
        <result column="REPLY_AVATOR" jdbcType="VARCHAR" property="replyAvator"/>
        <result column="ATTACH" jdbcType="LONGVARCHAR" property="attach"/>
        <result column="CUSTOM_MSG_TYPE" jdbcType="VARCHAR" property="customMsgType"/>
        <result column="IS_GARBAGE" jdbcType="VARCHAR" property="isGarbage"/>
        <result column="COURSE_ID" jdbcType="BIGINT" property="courseId"/>
        <result column="LIVE_TOPIC" jdbcType="VARCHAR" property="liveTopic"/>
    </resultMap>

    <sql id="Base_Column_List">
        ID, FROM_ACCOUNT, FROM_CLIENT_TYPE, MSGID_CLIENT, FROM_EXT, FROM_AVATOR, FROM_NICK,
        MSG_TIMESTAMP, RESEND_FLAG, MSG_TYPE, CHAT_ROOM_ID, QUIZ_OR_REPLY, REPLY_ID, REPLY_NAME,
        REPLY_AVATOR,ATTACH,CUSTOM_MSG_TYPE,IS_GARBAGE,COURSE_ID,LIVE_TOPIC
    </sql>


    <select id="selectByCoursePage" parameterType="java.lang.Long" resultType="Map">
        select
        ID id, FROM_ACCOUNT fromAccount, FROM_CLIENT_TYPE fromClientType, MSGID_CLIENT msgidClient, FROM_EXT fromExt,
        FROM_AVATOR fromAvator, FROM_NICK fromNick,MSG_TIMESTAMP msgTimestamp, RESEND_FLAG resendFlag, MSG_TYPE msgType,
        CHAT_ROOM_ID chatRoomId, QUIZ_OR_REPLY quizOrReply, REPLY_ID replyId, REPLY_NAME replyName,REPLY_AVATOR replyAvator,
        ATTACH attach,CUSTOM_MSG_TYPE customMsgType,IS_GARBAGE isGarbage,COURSE_ID courseId,LIVE_TOPIC liveTopic
        from chat_room_msg
        where
        IS_GARBAGE = '0' AND
        ((
        MSG_TYPE = 'CUSTOM' AND (CUSTOM_MSG_TYPE = 5 or CUSTOM_MSG_TYPE = 6  or CUSTOM_MSG_TYPE = 11 )
        ) OR MSG_TYPE = 'TEXT' OR MSG_TYPE = 'AUDIO'  OR MSG_TYPE = 'PICTURE')
       AND  COURSE_ID= #{courseId}
    </select>

    <select id="selectByCourseId" parameterType="java.lang.Long" resultType="Map">
        select
        ID id, FROM_ACCOUNT fromAccount, FROM_CLIENT_TYPE fromClientType, MSGID_CLIENT msgidClient, FROM_EXT fromExt,
        FROM_AVATOR fromAvator, FROM_NICK fromNick,MSG_TIMESTAMP msgTimestamp, RESEND_FLAG resendFlag, MSG_TYPE msgType,
        CHAT_ROOM_ID chatRoomId, QUIZ_OR_REPLY quizOrReply, REPLY_ID replyId, REPLY_NAME replyName,REPLY_AVATOR replyAvator,
        ATTACH attach,CUSTOM_MSG_TYPE customMsgType,IS_GARBAGE isGarbage,COURSE_ID courseId,LIVE_TOPIC liveTopic
        from chat_room_msg
        where COURSE_ID= #{courseId}
        and (CUSTOM_MSG_TYPE not in (7,8,9,10,11,12,13,14,15,16) or CUSTOM_MSG_TYPE is null)
    </select>

    <insert id="insert" parameterType="com.longlian.model.ChatRoomMsg">
        insert into chat_room_msg (ID , FROM_ACCOUNT, FROM_CLIENT_TYPE, MSGID_CLIENT, FROM_EXT, FROM_AVATOR,
        FROM_NICK, MSG_TIMESTAMP, RESEND_FLAG, MSG_TYPE, CHAT_ROOM_ID, QUIZ_OR_REPLY,
        REPLY_ID, REPLY_NAME, REPLY_AVATOR, ATTACH ,CUSTOM_MSG_TYPE , IS_GARBAGE,COURSE_ID,LIVE_TOPIC )
        values (#{id} , #{fromAccount}, #{fromClientType}, #{msgidClient}, #{fromExt}, #{fromAvator},
        #{fromNick}, #{msgTimestamp}, #{resendFlag}, #{msgType}, #{chatRoomId}, #{quizOrReply},
        #{replyId}, #{replyName}, #{replyAvator}, #{attach},
        #{customMsgType},#{isGarbage},#{courseId},#{liveTopic})
    </insert>

    <update id="updateCoustomType" parameterType="com.longlian.model.ChatRoomMsg">
    update chat_room_msg
    set CUSTOM_MSG_TYPE = #{customMsgType}
    where ID = #{id}
  </update>


    <select id="getAllHistoryMsgPage" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from chat_room_msg
        <where>
            <if test="@Ognl@isNotEmpty(chatRoomMsg.msgType)">
                AND MSG_TYPE = #{chatRoomMsg.msgType}
            </if>
        </where>
    </select>

    <select id="getHistoryMsgPage" resultType="Map">
        select
        ID id, FROM_ACCOUNT fromAccount, FROM_CLIENT_TYPE fromClientType, MSGID_CLIENT msgidClient, FROM_EXT fromExt,
        FROM_AVATOR fromAvator, FROM_NICK fromNick,MSG_TIMESTAMP msgTimestamp, RESEND_FLAG resendFlag, MSG_TYPE msgType,
        CHAT_ROOM_ID chatRoomId, QUIZ_OR_REPLY quizOrReply, REPLY_ID replyId, REPLY_NAME replyName,REPLY_AVATOR replyAvator,
        ATTACH attach,CUSTOM_MSG_TYPE customMsgType,IS_GARBAGE isGarbage,COURSE_ID courseId,LIVE_TOPIC liveTopic
        from chat_room_msg
        <where>
            IS_GARBAGE = '0' AND
            COURSE_ID= #{courseId}
            <if test="@Ognl@isNotEmpty(chatRoomMsg.msgTimestamp)">
                AND MSG_TIMESTAMP &lt; #{chatRoomMsg.msgTimestamp}
            </if>
        </where>
    </select>

    <select id="getChatRoomMsgPage" resultType="Map">
        select
        ID id, FROM_ACCOUNT fromAccount, FROM_CLIENT_TYPE fromClientType, MSGID_CLIENT msgidClient, FROM_EXT fromExt,
        FROM_AVATOR fromAvator, FROM_NICK fromNick,MSG_TIMESTAMP msgTimestamp, RESEND_FLAG resendFlag, MSG_TYPE msgType,
        CHAT_ROOM_ID chatRoomId, QUIZ_OR_REPLY quizOrReply, REPLY_ID replyId, REPLY_NAME replyName,REPLY_AVATOR replyAvator,
        ATTACH attach,CUSTOM_MSG_TYPE customMsgType,IS_GARBAGE isGarbage,COURSE_ID courseId,LIVE_TOPIC liveTopic
        from chat_room_msg
        <where>
            IS_GARBAGE = '0' AND
            COURSE_ID= #{courseId}
            <if test="@Ognl@isNotEmpty(chatRoomMsg.msgTimestamp)">
                AND MSG_TIMESTAMP &lt; #{chatRoomMsg.msgTimestamp}
            </if>
            <![CDATA[AND ((FROM_ACCOUNT=#{chatRoomMsg.fromAccount}  and  MSG_TYPE <> 'CUSTOM') or ( QUIZ_OR_REPLY !='0'  AND  MSG_TYPE = 'CUSTOM')) ]]>
        </where>
    </select>

    <select id="getIsConnected" resultType="java.lang.String">
        SELECT (CASE WHEN (m.CUSTOM_MSG_TYPE IS NULL OR m.CUSTOM_MSG_TYPE = '9') THEN '0' ELSE '1' END) res
        FROM chat_room_msg m WHERE m.CHAT_ROOM_ID =  #{chatRoomId}
        AND m.CUSTOM_MSG_TYPE IN ('8', '9') AND m.MSG_TYPE = 'CUSTOM'
        ORDER BY m.MSG_TIMESTAMP DESC LIMIT 1
    </select>

    <update id="clearScreenByChatRoomId" parameterType="long">
        update chat_room_msg SET IS_GARBAGE = '1' WHERE CHAT_ROOM_ID = #{chatRoomId}
    </update>
    <update id="updateCourseName">
      update chat_room_msg SET LIVE_TOPIC =#{courseName} WHERE COURSE_ID = #{courseId}
    </update>
    <update id="updateCourseByChatRoomId">
         update chat_room_msg SET LIVE_TOPIC =#{courseName} , COURSE_ID = #{courseId} where CHAT_ROOM_ID = #{chatRoomId} AND COURSE_ID = 0
    </update>

    <select id="findQuestry" resultMap="BaseResultMap">
        SELECT ID , FROM_AVATOR , FROM_NICK , ATTACH , MSG_TIMESTAMP ,  MSGID_CLIENT ,
        FROM_ACCOUNT FROM chat_room_msg
        <where>
            IS_GARBAGE = '0' AND CUSTOM_MSG_TYPE = '5' AND QUIZ_OR_REPLY = '1'
            AND COURSE_ID = #{courseId} and ATTACH != ''
            <if test="msgId > 0 ">AND ID &lt; #{msgId}</if>
        </where>
        ORDER BY MSG_TIMESTAMP DESC
        LIMIT #{limit}
    </select>

    <select id="findAllMsg" resultMap="BaseResultMap">
        SELECT ID , FROM_AVATOR , FROM_NICK , ATTACH , MSG_TIMESTAMP ,FROM_ACCOUNT , MSGID_CLIENT FROM chat_room_msg
        <where>
            IS_GARBAGE = '0' AND CUSTOM_MSG_TYPE IS NULL AND COURSE_ID = #{courseId}
            AND FROM_ACCOUNT != #{teacherId} and ATTACH != ''
            <if test="msgId > 0 ">AND ID &lt; #{msgId}</if>
        </where>
        ORDER BY MSG_TIMESTAMP DESC
        LIMIT #{limit}
    </select>

    <resultMap id="BaseResultMapDto" type="com.longlian.dto.ChatRoomMsgDto" extends="BaseResultMap">

    </resultMap>

    <select id="findTeacherMsgPage" resultMap="BaseResultMapDto">
        SELECT ID ,  FROM_AVATOR , FROM_NICK ,  ATTACH , MSG_TIMESTAMP ,CUSTOM_MSG_TYPE ,
        FROM_ACCOUNT , MSG_TYPE, MSGID_CLIENT
        FROM chat_room_msg WHERE
          ((FROM_ACCOUNT = #{teacherId}  and CUSTOM_MSG_TYPE is NULL)
         or (FROM_ACCOUNT != #{teacherId} and CUSTOM_MSG_TYPE = '11'))
         AND IS_GARBAGE = '0' and ATTACH != ''
        and  COURSE_ID = #{courseId}
    </select>

    <select id="findLastThreeMsg" resultMap="BaseResultMap">
        SELECT ID ,  FROM_AVATOR , FROM_NICK ,  ATTACH , MSG_TIMESTAMP ,
        FROM_ACCOUNT , CUSTOM_MSG_TYPE , MSGID_CLIENT FROM chat_room_msg
        where
            IS_GARBAGE = '0'
            and (CUSTOM_MSG_TYPE  = '5' OR CUSTOM_MSG_TYPE IS NULL) and ATTACH != ''
            AND FROM_ACCOUNT != #{teacherId}  AND  COURSE_ID = #{courseId}
            ORDER BY MSG_TIMESTAMP
            DESC LIMIT #{limit}
    </select>

    <update id="updateMsgGarbage">
        update chat_room_msg SET IS_GARBAGE = '1' WHERE MSGID_CLIENT = #{msgidClient}
    </update>

    <select id="findMsgByMsgClientId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM chat_room_msg WHERE MSGID_CLIENT = #{msgIdClinet}
    </select>

    <select id="findMsgByCourseId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM chat_room_msg
        <where>
            IS_GARBAGE = '0' AND
            (
            (FROM_ACCOUNT = #{teacherId} AND (CUSTOM_MSG_TYPE IN ('13','14') OR CUSTOM_MSG_TYPE IS NULL))
            OR CUSTOM_MSG_TYPE = '11'
            )
            AND COURSE_ID = #{courseId} and ATTACH != ''
            <if test="msgId > 0 ">AND ID &lt; #{msgId}</if>
        </where>
        ORDER BY MSG_TIMESTAMP DESC
        LIMIT #{pageSize}
    </select>

    <update id="updateAttach">
        update chat_room_msg SET ATTACH = #{attach} WHERE MSGID_CLIENT = #{msgidClient}
    </update>

    <select id="findMaxId" resultType="long">
        SELECT ID FROM chat_room_msg ORDER BY ID DESC LIMIT 0 , 1
    </select>

    <select id="findPictureAndVideo" resultMap="BaseResultMap">
        SELECT MSGID_CLIENT , ATTACH , MSG_TYPE FROM chat_room_msg WHERE MSG_TYPE = 'PICTURE' OR MSG_TYPE = 'AUDIO'
        limit #{offset}, #{pageSize}
    </select>
    <!--根据课程id获取课程消息条数-->
    <select id="getMsgCount" resultType="Integer">
        SELECT COUNT(*) FROM chat_room_msg WHERE COURSE_ID = #{courseId}
    </select>
</mapper>