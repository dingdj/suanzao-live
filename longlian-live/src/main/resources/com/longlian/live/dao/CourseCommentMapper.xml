<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.longlian.live.dao.CourseCommentMapper">

    <resultMap id="BaseResultMap" type="com.longlian.model.CourseComment">
        <id column="ID" jdbcType="BIGINT" property="id"/>
        <result column="COURSE_ID" jdbcType="BIGINT" property="courseId"/>
        <result column="APP_ID" jdbcType="BIGINT" property="appId"/>
        <result column="CONTENT" jdbcType="VARCHAR" property="content"/>
        <result column="STATUS" jdbcType="VARCHAR" property="status"/>
        <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="SERIES_COURSE_ID" jdbcType="BIGINT" property="seriesCourseId"/>
    </resultMap>
    <sql id="Base_Column_List">
    ID, COURSE_ID, APP_ID, CONTENT, STATUS, CREATE_TIME,SERIES_COURSE_ID
  </sql>

    <insert id="insert" parameterType="com.longlian.model.CourseComment">

        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into course_comment (COURSE_ID, APP_ID, CONTENT, STATUS, CREATE_TIME,SERIES_COURSE_ID)
        values (#{courseId}, #{appId}, #{content}, '0', now(),#{seriesCourseId})
    </insert>

    <update id="update" parameterType="com.longlian.model.CourseComment">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update course_comment
        set COURSE_ID = #{courseId},
        APP_ID = #{appId},
        CONTENT = #{content},
        STATUS = #{status},
        CREATE_TIME = #{createTime}
        where ID = #{id}
    </update>

    <select id="getLastListByCourseId" parameterType="long" resultType="java.util.Map">
    select  cc.ID id,   cc.CONTENT content , cc.CREATE_TIME createTime,au.NAME userName , au.PHOTO photo
    from course_comment cc
    LEFT  JOIN app_user au on au.ID =   cc.APP_ID
    WHERE cc.COURSE_ID = #{courseId} ORDER  by cc.CREATE_TIME desc limit 0,2
  </select>

    <select id="getCourseCommentSum" parameterType="long" resultType="long">
    SELECT COUNT(1) FROM course_comment  WHERE  (COURSE_ID = #{courseId} or SERIES_COURSE_ID = #{courseId}) AND STATUS='0'
  </select>

    <select id="getCommentListByCourseIdPage" resultType="map">
        SELECT a.NAME as name,a.PHOTO as photo,c.CONTENT as content,c.CREATE_TIME as createTime
        FROM course_comment c
        LEFT JOIN app_user a ON a.ID = c.APP_ID
        WHERE c.COURSE_ID = #{courseId} AND c.STATUS='0'
        ORDER BY c.CREATE_TIME DESC
     </select>

    <select id="getCoursePeopleSum" parameterType="long" resultType="long">
        SELECT COUNT(DISTINCT APP_ID) FROM course_comment  WHERE  COURSE_ID = #{courseId} or  SERIES_COURSE_ID =#{courseId}  AND STATUS='0'
    </select>

    <select id="getSeriesCourseCommentSum" parameterType="long" resultType="long">
        SELECT COUNT(1) FROM course_comment  WHERE
        SERIES_COURSE_ID = #{seriesId} or COURSE_ID = #{seriesId} AND STATUS='0'
    </select>
    
    <select id="getCommentListByServiesCourseIdPage" resultType="map">
     SELECT a.NAME as name,a.PHOTO as photo,c.CONTENT as content,c.CREATE_TIME as createTime
        FROM course_comment c
        LEFT JOIN app_user a ON a.ID = c.APP_ID
        WHERE
         c.COURSE_ID = #{seriesId} OR c.SERIES_COURSE_ID=#{seriesId}  AND c.STATUS='0'
        ORDER BY c.CREATE_TIME DESC
    </select>   
    
</mapper>
